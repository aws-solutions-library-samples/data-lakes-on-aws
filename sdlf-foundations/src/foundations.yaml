AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Resources to be created by the common stack

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pChildAccountId: # used by cicd lambda
    Description: Child AWS account ID
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
  pOrg:
    Description: Name of the organization owning the datalake (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,9}"
  pDomain:
    Description: Data domain name
    Type: String
  pCustomBucketPrefix:
    Description: S3 Bucket Prefix if different from default. Must be a valid S3 Bucket name
    Type: String
    Default: sdlf
  pCicdRole:
    Description: Name of the IAM role used to deploy SDLF constructs
    Type: String
    Default: sdlf-cicd-domain
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false
  # pVpcSecurityGroupIds and pVpcSubnetIds are passed explicitly (unlike in sdlf-cicd/template-cicd-sdlf-repositories.yaml for example)
  # due to Fn::ImportValue not being accepted in CloudFormation modules template fragments
  pVpcSecurityGroupIds:
    Description: VPC Security Groups Ids
    Type: String
    Default: ""
  pVpcSubnetIds:
    Description: VPC Subnet Ids
    Type: String
    Default: ""

Conditions:
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, sdlf]]
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    KmsKeyArn: !GetAtt rKMSKey.Arn
    VpcConfig: !If
      - RunInVpc
      - SecurityGroupIds: !Split [",", !Ref pVpcSecurityGroupIds]
        SubnetIds: !Split [",", !Ref pVpcSubnetIds]
      - !Ref "AWS::NoValue"

Resources:
  ######## LAKE FORMATION #########
  rDataLakeSettings:
    Type: AWS::LakeFormation::DataLakeSettings
    Properties:
      Admins:
        - DataLakePrincipalIdentifier: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pCicdRole}
      CreateDatabaseDefaultPermissions: []
      CreateTableDefaultPermissions: []
      MutationType: REPLACE

  rLakeFormationDataAccessRole: # https://docs.aws.amazon.com/lake-formation/latest/dg/registration-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*"
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*:log-stream:*"

  ######## KMS #########
  rKMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: RetainExceptOnCreate
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: SDLF Foundations KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: sdlf-key-default-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudTrail/CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com
          - Sid: Allow S3 Events access
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: "*"
          - Sid: Allow DynamoDB access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub dynamodb.${AWS::Region}.amazonaws.com
          - Sid: Allow ElasticSearch access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub es.${AWS::Region}.amazonaws.com
              Bool:
                kms:GrantIsForAWSResource: true
          - Sid: Allow LakeFormation access
            Effect: Allow
            Principal:
              AWS: !GetAtt rLakeFormationDataAccessRole.Arn
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"

  rKMSKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: alias/sdlf-kms-key
      TargetKeyId: !Ref rKMSKey

  ######## SSM #########
  rKMSKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/KMS/KeyArn
      Type: String
      Value: !GetAtt rKMSKey.Arn
      Description: ARN of the KMS key

  rLakeFormationDataAccessRoleSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/IAM/LakeFormationDataAccessRoleArn
      Type: String
      Value: !GetAtt rLakeFormationDataAccessRole.Arn
      Description: Lake Formation Data Access Role

  rLakeFormationDataAccessRoleNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/IAM/LakeFormationDataAccessRole
      Type: String
      Value: !Ref rLakeFormationDataAccessRole
      Description: Lake Formation Data Access Role

  ######## S3 #########
  ####### Access Logging Bucket ######
  rS3AccessLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs bucket should not have logging enabled https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-s3logs"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-s3logs"
      LifecycleConfiguration:
        Rules:
          - Id: InfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          - Id: DeepArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: DEEP_ARCHIVE
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rS3AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}
            Condition:
              ArnLike:
                "aws:SourceArn":
                  !If
                    - UseCustomBucketPrefix
                    - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}*"
                    - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}*"
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}

  ####### S3 Buckets #########
  rLakeFormationDataAccessRolePolicy:
    Type: AWS::IAM::Policy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Condition Applied to restrict access, and the KMS keys do not exist at this stage
    Properties:
      PolicyName: sdlf-lakeformation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*"
          - Effect: Allow
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"
            Condition:
              "ForAnyValue:StringLike":
                "kms:ResourceAliases":
                  - alias/sdlf-kms-key
                  - alias/sdlf-*-kms-data-key
      Roles:
        - !Ref rLakeFormationDataAccessRole

  rArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-artifacts"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-artifacts"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-artifacts"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-artifacts"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt rKMSKey.Arn
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  # To Enforce KMS encryption: https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-store-kms-encrypted-objects/
  rRawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-raw"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-raw"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-raw"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-raw"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rRawBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rRawBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rRawBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rRawBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rStageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-stage"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-stage"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-stage"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-stage"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rStageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rStageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rStageBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rStageBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rAnalyticsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-analytics"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-analytics"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-analytics"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-analytics"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rAnalyticsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAnalyticsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAnalyticsBucketLakeFormationS3Registration:
    Type: AWS::LakeFormation::Resource
    DependsOn: rLakeFormationDataAccessRolePolicy
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/
      RoleArn: !GetAtt rLakeFormationDataAccessRole.Arn
      UseServiceLinkedRole: False

  rAthenaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-athena"
          - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-athena"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-athena"
            - !Sub "${pOrg}-${pDomain}-${AWS::Region}-${AWS::AccountId}-athena"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rAthenaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAthenaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  ######## Lambda & SQS #########
  rQueueCatalog:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      QueueName: sdlf-catalog-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rDeadLetterQueueCatalog.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 60
      MessageRetentionPeriod: 604800
      KmsMasterKeyId: !GetAtt rKMSKey.Arn

  rDeadLetterQueueCatalog:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      QueueName: sdlf-catalog-dlq
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      KmsMasterKeyId: !GetAtt rKMSKey.Arn

  rQueueCatalogPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - SQS:SendMessage
            Resource: !GetAtt rQueueCatalog.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt rS3ObjectTriggerRule.Arn
      Queues:
        - !Ref rQueueCatalog

  rS3ObjectTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
          - Object Deleted
        detail:
          bucket:
            name:
              - !Ref rRawBucket
              - !Ref rStageBucket
              - !Ref rAnalyticsBucket
      Targets:
        - Arn: !GetAtt rQueueCatalog.Arn
          RetryPolicy:
            MaximumRetryAttempts: 3
            MaximumEventAgeInSeconds: 600
          DeadLetterConfig:
            Arn: !GetAtt rDeadLetterQueueCatalog.Arn
          Id: sdlf-catalog

  rQueueLambdaCatalogEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt rQueueCatalog.Arn
      FunctionName: !GetAtt rLambdaCatalog.Arn

  rLambdaCatalog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/catalog/src
      FunctionName: sdlf-catalog
      # Environment:
      #   Variables:
      #     ENV: !Ref p
      Description: Catalogs S3 Put and Delete to ObjectMetaDataCatalog
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaCatalogRedrive:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/catalog-redrive/src
      FunctionName: sdlf-catalog-redrive
      Environment:
        Variables:
          QUEUE: !GetAtt rQueueCatalog.QueueName
          DLQ: !GetAtt rDeadLetterQueueCatalog.QueueName
      Description: Redrives Failed S3 Put/Delete to Catalog Lambda
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaCatalogRedriveLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaCatalogRedrive}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !GetAtt rKMSKey.Arn

  rRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: sdlf-catalog
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-catalog*
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ListQueueTags
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - !GetAtt rQueueCatalog.Arn
                  - !GetAtt rDeadLetterQueueCatalog.Arn
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !GetAtt rKMSKey.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/EventBridge/*

  ####### SSM #######
  rS3ArtifactBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/ArtifactsBucket
      Type: String
      Value: !Ref rArtifactsBucket
      Description: Name of the Artifacts S3 bucket
  rS3CentralBucketSsm: # kept for backward compatibility
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/CentralBucket
      Type: String
      Value: !Ref rRawBucket
      Description: Name of the Central S3 bucket (deprecrated, use /SDLF/S3/RawBucket instead)
  rS3RawBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/RawBucket
      Type: String
      Value: !Ref rRawBucket
      Description: Name of the Raw S3 bucket
  rS3StageBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/StageBucket
      Type: String
      Value: !Ref rStageBucket
      Description: Name of the Stage S3 bucket
  rS3AnalyticsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/AnalyticsBucket
      Type: String
      Value: !Ref rAnalyticsBucket
      Description: Name of the Analytics S3 bucket
  rS3AthenaBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/AthenaBucket
      Type: String
      Value: !Ref rAthenaBucket
      Description: Name of the Athena results S3 bucket

  ######## DYNAMODB #########
  rObjectMetadata:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKMSKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoObjectMetadataSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Dynamo/ObjectCatalog
      Type: String
      Value: !Ref rObjectMetadata
      Description: Name of the DynamoDB used to store metadata

  ######## SSM OUTPUTS #########
  rOrganizationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Misc/pOrg
      Type: String
      Value: !Ref pOrg
      Description: Name of the Organization owning the datalake

  rDomainSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Misc/pDomain
      Type: String
      Value: !Ref pDomain
      Description: Data domain name

  rS3AccessLogsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/AccessLogsBucket
      Type: String
      Value: !Ref rS3AccessLogsBucket
      Description: S3 Access Logs Bucket

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oChildAccountId:
    Description: Child AWS account ID
    Value: !Ref pChildAccountId
  oS3ArtifactsBucket:
    Description: Name of the domain's Artifacts S3 bucket
    Value: !Ref rArtifactsBucket
