AWSTemplateFormatVersion: "2010-09-09"
Description: Contains all the resources necessary for a single dataset

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pDatasetName:
    Description: The name of the dataset (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,14}"
    Default: "default"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPipelineDetails:
    Type: String
    Default: >-
      {
        "main": {
          "B": {
            "glue_capacity": {
              "NumberOfWorkers": 10,
              "WorkerType": "G.1X"
            },
            "glue_extra_arguments": {
              "--enable-auto-scaling": "true"
            }
          }
        }
      }
      
Conditions:
  UseExistingGlueDatabase: !Not [!Equals [!Ref pDatasetName, default]]

Resources:
  ######## GLUE #########
  rGlueDataCatalog:
    Condition: UseExistingGlueDatabase
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !Sub "${pTeamName} team ${pDatasetName} metadata catalog"
        Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db

  rGlueDataCatalogLakeFormationTag:
    Condition: UseExistingGlueDatabase
    Type: AWS::LakeFormation::TagAssociation
    Properties:
        Resource:
          Database:
            CatalogId: !Ref AWS::AccountId
            Name: !Ref rGlueDataCatalog
        LFTags:
          - CatalogId: !Ref AWS::AccountId
            TagKey: !Sub "sdlf:team:${pTeamName}"
            TagValues:
              - !Sub ${pTeamName}

  rGlueCrawler:
    Condition: UseExistingGlueDatabase
    Type: AWS::Glue::Crawler
    Properties:
      Role: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      CrawlerSecurityConfiguration: !Sub "{{resolve:ssm:/SDLF/Glue/${pTeamName}/SecurityConfigurationId}}"
      DatabaseName: !Ref rGlueDataCatalog
      Name: !Sub sdlf-${pTeamName}-${pDatasetName}-post-stage-crawler
      Targets:
        S3Targets:
          - Path: !Sub s3://${pStageBucket}/post-stage/${pTeamName}/${pDatasetName}

  rGlueCrawlerLakeFormationPermissions:
    Condition: UseExistingGlueDatabase
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/CrawlerRoleArn}}"
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rGlueDataCatalog

  ######## SSM #########
  rGlueDataCatalogSsm:
    Condition: UseExistingGlueDatabase
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/DataCatalog
      Type: String
      Value: !Ref rGlueDataCatalog
      Description: !Sub "${pTeamName} team ${pDatasetName} metadata catalog"

  rGlueCrawlerSsm:
    Condition: UseExistingGlueDatabase
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/GlueCrawler
      Type: String
      Value: !Ref rGlueCrawler
      Description: !Sub "${pTeamName} team ${pDatasetName} Glue crawler"

  rDatasetSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Datasets/${pTeamName}/${pDatasetName}
      Type: String
      Value: !Ref pPipelineDetails # bit of a hack for datasets lambda
      Description: !Sub "Placeholder ${pTeamName} ${pDatasetName}"

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oPipelineTransforms:
    Description: Transforms to put in DynamoDB
    Value: !Ref pPipelineDetails
