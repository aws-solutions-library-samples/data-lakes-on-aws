AWSTemplateFormatVersion: "2010-09-09"
Description: CICD pipelines to automate SDLF workflows

Parameters:
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId

Resources:
  rLambdaLayersCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sdlf-codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action: codecommit:GitPull
                Resource:
                  - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource:
                  - !Ref pKMSKey
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub arn:${AWS::Partition}:iam::*:role/sdlf-cicd-domain-crossaccount-lambda-layers

  rBuildLambdaLayersPackage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Name: sdlf-cicd-build-lambda-layers
      Description: Creates a Lambda Layer containing the libraries and version numbers listed in the requirements.txt file in the repository provided
      EncryptionKey: !Ref pKMSKey
      Environment:
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref pArtifactsBucket
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      ServiceRole: !GetAtt rLambdaLayersCodeBuildServiceRole.Arn
      Source:
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                  python: 3.9
              commands:
                - pip3 install boto3
            build:
              commands:
                - |-
                    temp_role=$(aws sts assume-role --role-arn "arn:${AWS::Partition}:iam::$DOMAIN_ACCOUNT_ID:role/sdlf-cicd-domain-crossaccount-lambda-layers" --role-session-name "codebuild-lambda-layer")
                    AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                    AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                    AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
                - |-
                    # download zip and wheels
                    if [ -f "./external_layers.json" ] || [ -f "./external_wheels.json" ]; then
                        if [ -f "./external_layers.json" ]; then
                            echo "external_layers.json exists"
                            # the following assumes all declared layer names have a url associated to them
                            LAYER_NAMES=$(jq -r '.[] | keys_unsorted' external_layers.json)
                            URLS=$(jq -r '.[] | .[].url' external_layers.json)
                            for i in "${!LAYER_NAMES[@]}"; do
                                curl -s -L -o "${LAYER_NAMES[i]}.zip" "${URLS[i]}"
                                aws s3api put-object --bucket "$ARTIFACTS_BUCKET" --key "layers/$DOMAIN/$ENVIRONMENT/$TEAM/${LAYER_NAMES[i]}.zip" --body "${LAYER_NAMES[i]}.zip"
                            done
                        fi

                        if [ -f "./external_wheels.json" ]; then
                            echo "external_wheels.json exists"
                            # the following assumes all declared layer names have a url associated to them
                            WHEEL_NAMES=$(jq -r '.[] | keys_unsorted' external_layers.json)
                            URLS=$(jq -r '.[] | .[].url' external_layers.json)
                            for i in "${!WHEEL_NAMES[@]}"; do
                                curl -s -L -o "${WHEEL_NAMES[i]}.whl" "${URLS[i]}"
                                aws s3api put-object --bucket "$ARTIFACTS_BUCKET" --key "layers/$DOMAIN/$ENVIRONMENT/$TEAM/${WHEEL_NAMES[i]}.zip" --body "${WHEEL_NAMES[i]}.zip"
                            done
                        fi

                        // todo for each element download url to element name.zip then add to commadelimitedlist
                        artifacts_bucket=$(aws ssm get-parameter --name /SDLF/S3/ArtifactsBucket --query "Parameter.Value" --output text)

                        cd ../

                    fi

                    echo ">>>>> Beginning build of subdirectories >>>>>"
                    for dir in ./*/
                    do
                        dir=${dir%*/}      # remove the trailing "/"
                        echo "${dir##*/}"    # print everything after the final "/"
                        echo "---- Looking to move to: "

                        cd "$dir"
                        echo "Moving into dir..."
                        echo "Current directory contents:"
                        ls
                        if [ -f "./requirements.txt" ]; then
                            echo "requirements.txt exists"
                            echo "-----> making temporary directory"
                            mkdir -p layer/python
                            pip3 -q install -r ./requirements.txt -t layer/python
                            cd layer/
                            zip -r layer.zip python/ -x \*__pycache__\*
                            cd ../..
                        fi
                        echo "============= COMPLETED DIRECTORY BUILD ============="
                    done
                - aws cloudformation package echo ">>>>> Beginning build of default layer >>>>>"
        Type: CODEPIPELINE
      TimeoutInMinutes: 20

  ######## SSM OUTPUTS #########
  rBuildLambdaLayersPackageSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/CodeBuild/BuildLambdaLayersPackage
      Type: String
      Value: !Ref rBuildLambdaLayersPackage
      Description: Name of the CodeBuild job that creates a Lambda Layer containing the libraries and version numbers listed in the requirements.txt file in the repository provided
