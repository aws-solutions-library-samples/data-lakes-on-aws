AWSTemplateFormatVersion: 2010-09-09
Description: CICD resources to handle deployment of a new team

Parameters:
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/DevOpsArtifactsBucket
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId
  pDomain:
    Description: Name of the data domain (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,9}"
  pTeamName:
    Description: Team name
    Type: String
  pCrossAccountTeamRole:
    Description: Team-specific cross-account role used to deploy stacks
    Type: String
  pChildAccountId:
    Description: Child AWS account ID
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
  pEnvironment:
    Description: Environment name
    Type: String
    AllowedValues: [dev, test, prod]
    Default: dev
  pBuildCloudFormationPackage:
    Description: CodeBuild job that packages a CloudFormation template
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/CodeBuild/BuildCloudFormationPackage
  pEnableLambdaLayerBuilder:
    Description: Add Lambda layer builder infrastructure and pipeline stages
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/LambdaLayerBuilder/Enabled
  pCicdRepository:
    Description: Name of the Cicd repository
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/CodeCommit/CicdCodeCommit

Mappings:
  pCodeCommitBranch:
    dev:
      branch: dev
    test:
      branch: test
    prod:
      branch: master

Conditions:
  EnableLambdaLayerBuilder: !Equals [!Ref pEnableLambdaLayerBuilder, true]

Resources:
  rTeamMainCodeCommit:
    Type: AWS::CodeCommit::Repository
    Properties:
      # Code:
      #   S3:
      #     Bucket:
      #     Key: zip
      RepositoryDescription: !Sub ${pDomain} ${pTeamName} main repository
      RepositoryName: !Sub sdlf-main-${pDomain}-${pTeamName}

  rTeamMainCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role assumed by CodePipeline to fetch CloudFormation templates from the team main repository
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GitPull
                  - codecommit:GetRepository
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                Resource:
                  - !GetAtt rTeamMainCodeCommit.Arn
                  - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${pCicdRepository}
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:ListBucket*
                  - s3:Put*
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Describe*
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:List*
                  - kms:ReEncrypt*
                Resource: !Ref pKMSKey
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${pBuildCloudFormationPackage}"
                  - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/{{resolve:ssm:/SDLF/CodeBuild/BuildLambdaLayersPackage}}"
        - PolicyName: sdlf-cicd-cloudformation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource:
                  - !Sub arn:${AWS::Partition}:iam::${pChildAccountId}:role/sdlf-cicd-team-crossaccount-pipeline

  ######## CODEPIPELINE #########
  rTeamCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt rTeamMainCodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: "1"
              OutputArtifacts:
                - Name: TemplateSource
              Configuration:
                RepositoryName: !GetAtt rTeamMainCodeCommit.Name
                BranchName:
                  !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                PollForSourceChanges: false
              RunOrder: 1
            - !If
              - EnableLambdaLayerBuilder
              - Name: CicdSource
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Provider: CodeCommit
                  Version: "1"
                OutputArtifacts:
                  - Name: CicdTemplateSource
                Configuration:
                  RepositoryName: !Ref pCicdRepository
                  BranchName:
                    !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
                  PollForSourceChanges: false
                RunOrder: 1
              - !Ref AWS::NoValue
        - !If
          - EnableLambdaLayerBuilder
          - Name: BuildLambdaLayers
            Actions:
              - Name: Build
                InputArtifacts:
                  - Name: TemplateSource
                Namespace: LambdaLayersVariables
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: "1"
                  Provider: CodeBuild
                Configuration:
                  ProjectName: "{{resolve:ssm:/SDLF/CodeBuild/BuildLambdaLayersPackage}}"
                  EnvironmentVariables: !Sub >-
                    [{"name":"ENVIRONMENT", "value":"${pEnvironment}", "type":"PLAINTEXT"},
                    {"name":"DOMAIN", "value":"${pDomain}", "type":"PLAINTEXT"},
                    {"name":"TEAM", "value":"${pTeamName}", "type":"PLAINTEXT"}]
                RunOrder: 1
          - !Ref AWS::NoValue
        - !If
          - EnableLambdaLayerBuilder
          - Name: DeployLambdaLayers
            Actions:
              - Name: CreateStack
                RoleArn: !Sub arn:${AWS::Partition}:iam::${pChildAccountId}:role/sdlf-cicd-team-crossaccount-pipeline
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: '1'
                InputArtifacts:
                  - Name: TemplateSource
                  - Name: CicdTemplateSource
                Configuration:
                  ActionMode: CREATE_UPDATE
                  RoleArn: !Ref pCrossAccountTeamRole
                  StackName: !Sub sdlf-${pTeamName}-lambdalayers-${pEnvironment}
                  TemplatePath: "CicdTemplateSource::template-lambda-layer.yaml"
                  TemplateConfiguration: "TemplateSource::tags.json"
                  Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                  ParameterOverrides: !Sub |+
                    {
                      "pArtifactsBucket": "${pArtifactsBucket}",
                      "pDomain": "${pDomain}",
                      "pEnvironment": "${pEnvironment}",
                      "pTeamName": "${pTeamName}",
                      "pLayers": "#{LambdaLayersVariables.LAYERS_CDL}"
                    }
                RunOrder: 1
          - !Ref AWS::NoValue
        - Name: BuildPipelinesTemplate
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: TemplateSource
              OutputArtifacts:
                - Name: TemplatePackage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref pBuildCloudFormationPackage
                EnvironmentVariables: !Sub >-
                  [{"name":"TEMPLATE", "value":"pipelines-${pEnvironment}.yaml", "type":"PLAINTEXT"}]
              RunOrder: 1
        - Name: DeployPipelinesInfrastructure
          Actions:
            - Name: CreateStack
              RoleArn: !Sub arn:${AWS::Partition}:iam::${pChildAccountId}:role/sdlf-cicd-team-crossaccount-pipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: TemplateSource
                - Name: TemplatePackage
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Ref pCrossAccountTeamRole
                StackName: !Sub sdlf-${pTeamName}-pipelines-${pEnvironment}
                TemplatePath: "TemplatePackage::packaged-template.yaml"
                TemplateConfiguration: "TemplateSource::tags.json"
                ParameterOverrides: |
                  {
                    "pPipelineReference" : "#{codepipeline.PipelineExecutionId}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RunOrder: 1
        - Name: DeployDatasetsInfrastructure
          Actions:
            - Name: CreateStack
              RoleArn: !Sub arn:${AWS::Partition}:iam::${pChildAccountId}:role/sdlf-cicd-team-crossaccount-pipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: TemplateSource
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Ref pCrossAccountTeamRole
                StackName: !Sub sdlf-${pTeamName}-datasets-${pEnvironment}
                TemplatePath: !Sub "TemplateSource::datasets-${pEnvironment}.yaml"
                TemplateConfiguration: "TemplateSource::tags.json"
                ParameterOverrides: |
                  {
                    "pPipelineReference" : "#{codepipeline.PipelineExecutionId}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref pArtifactsBucket
        EncryptionKey:
          Id: !Ref pKMSKey
          Type: KMS

  rTeamMainCodeCommitTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: sdlf-cicd-trigger-rule
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${rTeamCodePipeline}

  rTeamMainCodeCommitTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt rTeamMainCodeCommit.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !FindInMap [pCodeCommitBranch, !Ref pEnvironment, branch]
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${rTeamCodePipeline}
          RoleArn: !GetAtt rTeamMainCodeCommitTriggerRole.Arn
          Id: sdlf-cicd-team
