AWSTemplateFormatVersion: "2010-09-09"
Description: Multi-environment CICD team repos resources in shared DevOps account

Parameters:
  pCustomIdentifier:
    Description: Custom identifier for resource names
    Type: String
    Default: sdlf
  pKMSKey:
    Description: The KMS key used by CodeBuild and CodePipeline
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/KMS/CICDKeyId
  pEnableMonitoring:
    Description: Build sdlf monitoring cloudformation module as part of domain pipelines
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Monitoring/Enabled

Conditions:
  EnableMonitoring: !Equals [!Ref pEnableMonitoring, true]

Resources:
  ######## GITLAB CUSTOM RESOURCE LAMBDA #########
  rGitLabRepositoryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/GitLab/*"

  rGitLabRepositoryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub sdlf-gitlab-repository-manager-${pCustomIdentifier}
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt rGitLabRepositoryLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import logging
          import ssl
          import boto3
          import cfnresponse
          from urllib.request import HTTPError, Request, URLError, urlopen
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          ssm = boto3.client('ssm')
          
          def lambda_handler(event, context):
              try:
                  logger.info(f"Event: {json.dumps(event)}")
                  
                  request_type = event['RequestType']
                  repository = event['ResourceProperties']['RepositoryName']
                  
                  if request_type in ['Create', 'Update']:
                      # Get GitLab parameters
                      gitlab_url = ssm.get_parameter(Name="/SDLF/GitLab/Url", WithDecryption=True)["Parameter"]["Value"]
                      gitlab_accesstoken = ssm.get_parameter(Name="/SDLF/GitLab/AccessToken", WithDecryption=True)["Parameter"]["Value"]
                      namespace_id = ssm.get_parameter(Name="/SDLF/GitLab/NamespaceId", WithDecryption=True)["Parameter"]["Value"]
                      
                      # Create GitLab repository
                      url = f"{gitlab_url}api/v4/projects/"
                      headers = {"Content-Type": "application/json", "PRIVATE-TOKEN": gitlab_accesstoken}
                      data = {
                          "name": repository,
                          "description": repository,
                          "path": repository,
                          "namespace_id": namespace_id,
                          "initialize_with_readme": "false",
                      }
                      json_data = json.dumps(data).encode("utf-8")
                      req = Request(url, data=json_data, headers=headers, method="POST")
                      unverified_context = ssl._create_unverified_context()
                      
                      try:
                          with urlopen(req, context=unverified_context) as response:
                              response_body = response.read().decode("utf-8")
                              logger.info(f"GitLab API response: {response_body}")
                              response_data = json.loads(response_body)
                              physical_resource_id = str(response_data.get('id', repository))
                      except HTTPError as e:
                          if e.code == 400:
                              logger.warning(f"Repository {repository} likely already exists")
                              physical_resource_id = repository
                          else:
                              raise e
                      except URLError as e:
                          logger.error(f"URL error occurred: {e.reason}")
                          raise e
                  else:
                      # Delete operation - GitLab repositories are typically not deleted automatically
                      physical_resource_id = event.get('PhysicalResourceId', repository)
                      logger.info(f"Delete operation for repository {repository} - no action taken")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_resource_id)
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, event.get('PhysicalResourceId', 'failed'))

  ######## GITLAB REPOSITORIES #########
  rCicdGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}cicd

  rFoundationsGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}foundations

  rTeamGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}team

  rPipelineGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}pipeline

  rDatasetGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}dataset

  rStageAGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}stageA

  rStageLambdaGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}stage-lambda

  rStageBGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}stageB

  rStageGlueGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}stage-glue

  rDatalakeLibraryGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}datalakeLibrary

  rMainGitLab:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}main

  rMonitoringGitLab:
    Type: AWS::CloudFormation::CustomResource
    Condition: EnableMonitoring
    Properties:
      ServiceToken: !GetAtt rGitLabRepositoryLambda.Arn
      RepositoryName: !Sub sdlf-${pCustomIdentifier}monitoring

  rCicdGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/CicdGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}cicd
      Description: Name of the Cicd repository

  rFoundationsGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/FoundationsGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}foundations
      Description: Name of the Foundations repository

  rTeamGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/TeamGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}team
      Description: Name of the Team repository

  rPipelineGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/PipelineGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}pipeline
      Description: Name of the Pipeline repository

  rDatasetGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/DatasetGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}dataset
      Description: Name of the Dataset repository

  rStageAGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/StageAGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}stageA
      Description: Name of the StageA repository

  rStageLambdaGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/StageLambdaGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}stage-lambda
      Description: Name of the Stage-Lambda repository

  rStageBGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/StageBGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}stageB
      Description: Name of the StageB repository

  rStageGlueGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/StageGlueGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}stage-glue
      Description: Name of the Stage-Glue repository

  rDatalakeLibraryGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/DatalakeLibraryGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}datalakeLibrary
      Description: Name of the DatalakeLibrary repository

  rMainGitLabSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GitLab/MainGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}main
      Description: Name of the main repository

  rMonitoringGitLabSsm:
    Type: AWS::SSM::Parameter
    Condition: EnableMonitoring
    Properties:
      Name: /SDLF/GitLab/MonitoringGitLab
      Type: String
      Value: !Sub sdlf-${pCustomIdentifier}monitoring
      Description: Name of the monitoring repository

Outputs:
  oKmsKey:
    Description: CICD KMS Key
    Value: !Ref pKMSKey