AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Data Quality Stage

Parameters:
  pPipelineReference:
    Description: Workaround for CloudFormation resolve:ssm not updating on stack update (https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/844)
    Type: String
    Default: none
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPipeline:
    Description: The name of the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pDataQualityBucket:
    Description: S3 bucket to store and analyze the results of AWS Glue Data Quality evaluations
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pKMSKeyId:
    Type: String
  pPipelineBucket:
    Type: String
  pApplicationName:
    Description: Name of the application (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,8}"
    Default: datalake
  pDataLakeAdminRoleArn:
    Description: Lake Formation Admin Role Arn
    Type: String
    Default: "{{resolve:ssm:/SDLF/IAM/DataLakeAdminRoleArn}}"
  pEnvironment:
    Description: Environment name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Misc/pEnv
  pOrganizationName:
    Description: Name of the organization (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,9}"
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false
  # pVpcSecurityGroupIds and pVpcSubnetIds are passed explicitly (unlike in sdlf-cicd/template-cicd-sdlf-repositories.yaml for example)
  # due to Fn::ImportValue not being accepted in CloudFormation modules template fragments
  pVpcSecurityGroupIds:
    Description: VPC Security Groups Ids
    Type: String
    Default: ""
  pVpcSubnetIds:
    Description: VPC Subnet Ids
    Type: String
    Default: ""

Conditions:
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Globals:
  Function:
    Runtime: python3.11
    Handler: lambda_function.lambda_handler
    Layers:
      - "{{resolve:ssm:/SDLF/Lambda/LatestDatalakeLibraryLayer}}"
    KmsKeyArn: !Sub "{{resolve:ssm:/SDLF/KMS/${pTeamName}/InfraKeyId}}"
    VpcConfig: !If
      - RunInVpc
      - SecurityGroupIds: !Split [",", !Ref pVpcSecurityGroupIds]
        SubnetIds: !Split [",", !Ref pVpcSubnetIds]
      - !Ref "AWS::NoValue"

Resources:
  ######## DYNAMODB #########
  rDynamoOctagonQualitySuggestions:
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      KeySchema:
        - AttributeName: suggestion_hash_key
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: suggestion_hash_key
          AttributeType: S
        - AttributeName: table_hash_key
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: table-index
          KeySchema:
            - AttributeName: table_hash_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TableName: !Sub octagon-DataQualitySuggestions-${pEnvironment}
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !Ref pKMSKeyId
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  rDynamoOctagonQualityAnalysis:
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      KeySchema:
        - AttributeName: analysis_hash_key
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: analysis_hash_key
          AttributeType: S
        - AttributeName: table_hash_key
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: table-index
          KeySchema:
            - AttributeName: table_hash_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TableName: !Sub octagon-DataQualityAnalysis-${pEnvironment}
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !Ref pKMSKeyId
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete

  ######## IAM #########
  # Common policy
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-${pPipeline}-*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !Ref pKMSKeyId

  # Step1 Role
  rRoleLambdaExecutionStep1:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PermissionsBoundary: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/TeamPermissionsBoundary}}"
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-data-quality-initial-check
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Glue/*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*

  rStatesExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that do not have resource limitations associated with them
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      PermissionsBoundary: !Sub "{{resolve:ssm:/SDLF/IAM/${pTeamName}/TeamPermissionsBoundary}}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-data-quality-states-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt rLambdaStep1.Arn
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                  - glue:GetJobRun
                  - glue:GetJobRuns
                  - glue:BatchStopJobRun
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pTeamName}-data-quality-*
              - Effect: Allow
                Action:
                  - glue:StartCrawler
                Resource:
                  - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments # W11 exception
                  - xray:PutTelemetryRecords # W11 exception
                  - xray:GetSamplingRules # W11 exception
                  - xray:GetSamplingTargets # W11 exception
                Resource: "*"

  ######## LAMBDA #########
  rLambdaStep1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/initial-check/src
      FunctionName: sdlf-data-quality-initial-check
      Description: Performs checks and determines which Data Quality job to run
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStep1LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaStep1}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rLambdaReplicate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sdlf-glue-replication
      Description: Replicates Glue Catalog Metadata and Data Quality to Octagon Schemas Table
      CodeUri: ../lambda/replicate/src
      Environment:
        Variables:
          ENV: !Ref pEnvironment
      MemorySize: 128
      Timeout: 300
      Role: !Ref pDataLakeAdminRoleArn

  rLambdaReplicateLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaReplicate}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !Ref pKMSKeyId

  rEventsInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaReplicate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rLambdaEventsRule.Arn

  ######## STEP FUNCTIONS #########
  rDataQualityStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: sdlf-data-quality-sm
      DefinitionUri: ./state-machine/data-quality.asl.json
      DefinitionSubstitutions:
        lStep1: !GetAtt rLambdaStep1.Arn
      Role: !GetAtt rStatesExecutionRole.Arn

  ######## GLUE #########
  rSuggestionRunnerGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: "pythonshell"
        PythonVersion: "3.9"
        ScriptLocation: ./glue/scripts/sdlf-data-quality-suggestion-runner.py
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/glue/"
        "--enable-metrics": "true"
        "--enable-glue-datacatalog": ""
        "--dynamodbSuggestionTableName": !Sub octagon-DataQualitySuggestions-${pEnvironment}
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
        "--additional-python-modules": "awswrangler==3.4.2,boto3==1.29.4"
        "--pDataLakeAdminRoleArn": !Ref pDataLakeAdminRoleArn
      ExecutionProperty:
        MaxConcurrentRuns: 10
      GlueVersion: "1.0"
      Timeout: 65
      Name: !Sub sdlf-${pTeamName}-data-quality-suggestion-runner
      Role: !Ref pDataLakeAdminRoleArn

  rVerificationRunnerGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: "pythonshell"
        PythonVersion: "3.9"
        ScriptLocation: ./glue/scripts/sdlf-data-quality-verification-runner.py
      DefaultArguments:
        "--TempDir": !Sub "s3://${pPipelineBucket}/glue/"
        "--enable-metrics": "true"
        "--enable-glue-datacatalog": ""
        "--dynamodbSuggestionTableName": !Sub octagon-DataQualitySuggestions-${pEnvironment}
        "--team": "default"
        "--dataset": "default"
        "--glueDatabase": "default"
        "--glueTables": "table1,table2"
        "--targetBucketName": !Sub "s3://${pDataQualityBucket}"
        "--additional-python-modules": "awswrangler==3.4.2,boto3==1.29.4"
        "--pDataLakeAdminRoleArn": !Ref pDataLakeAdminRoleArn
      ExecutionProperty:
        MaxConcurrentRuns: 10
      GlueVersion: "1.0"
      Timeout: 65
      Name: !Sub sdlf-${pTeamName}-data-quality-verification-runner
      Role: !Ref pDataLakeAdminRoleArn

  rGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: data quality metadata catalog
        Name: !Sub "${pOrganizationName}_${pApplicationName}_${pEnvironment}_data_quality_db"

  rGlueCrawlerLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !Ref pDataLakeAdminRoleArn
      Permissions:
        - CREATE_TABLE
        - ALTER
        - DROP
      Resource:
        DatabaseResource:
          Name: !Ref rGlueDataCatalog

  ######## EVENTS #########
  rLambdaEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers Glue replicate Lambda upon change to metadata catalog
      State: ENABLED
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Data Catalog Database State Change
          - Glue Data Catalog Table State Change
      Targets:
        - Arn: !GetAtt rLambdaReplicate.Arn
          Id: LambdaReplicate

  ######## SSM #########
  rDataQualityStateMachineSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/SM/DataQualityStateMachine
      Type: String
      Value: !Ref rDataQualityStateMachine
      Description: Data Quality State Machine

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
